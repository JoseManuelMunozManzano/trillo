////////////////////////////////////////////
// LOGO
.logo {
  height: 3.25rem;
  margin-left: 2rem;
}

////////////////////////////////////////////
// SEARCH
.search {
  flex: 0 0 40%;

  // A flex item is becoming a flex container. Nested flexbox
  display: flex;
  align-items: center; // centers along the cross-axis
  justify-content: center; // centers along the main axis

  &__input {
    // input element doesn't inherit the font-family of the global document
    font-family: inherit;
    font-size: inherit;
    color: inherit;
    background-color: var(--color-grey-light-2);
    border: none;
    padding: 0.7rem 2rem;
    border-radius: 100px;

    // It's 90% because when we clicked in it, the input will expand to 100%
    width: 90%;
    transition: all 0.2s;

    // We want the botton to be like on top on the input
    margin-right: -3.25rem;

    &:focus {
      outline: none;
      width: 100%;
      background-color: var(--color-grey-light-3);
    }

    &::-webkit-input-placeholder {
      font-weight: 100;
      color: var(--color-grey-light-4);
    }
  }

  // Selecting the sibling of the selected input
  &__input:focus + &__button {
    background-color: var(--color-grey-light-3);
  }

  &__button {
    border: none;
    background-color: var(--color-grey-light-2);

    &:focus {
      outline: none;
    }

    &:active {
      transform: translateY(2px);
    }
  }

  &__icon {
    // Formatting a SVG icon: we have to set its height and its width
    height: 2rem;
    width: 2rem;

    // Changing the color of the SVG icon
    fill: var(--color-grey-dark-3);
  }
}

////////////////////////////////////////////
// USER NAVIGATION
.user-nav {
  // We override align-items:center from .header
  align-self: stretch;

  // Again a flex-item is also at the same time a flex container. Nested flexbox
  display: flex;
  align-items: center;

  // Selecting direct children
  & > * {
    padding: 0 2rem;
    cursor: pointer;
    height: 100%;

    // Third level of flex containers
    display: flex;
    align-items: center;
  }

  & > *:hover {
    background-color: var(--color-grey-light-2);
  }

  &__icon-box {
    position: relative;
  }

  &__icon {
    height: 2.25rem;
    width: 2.25rem;
    fill: var(--color-grey-dark-2);
  }

  &__notification {
    font-size: 0.8rem;
    height: 1.75rem;
    width: 1.75rem;
    border-radius: 50%;
    background-color: var(--color-primary);
    color: #fff;
    position: absolute;
    top: 1.5rem;
    right: 1.1rem;

    // Centering text both horizontally and vertically.
    // We can actually use flexbox for that as well.
    // So flexbox doesn't only work when we have child elements, but it works with text as
    // well.
    // Four levels of flexbox, one inside of another
    display: flex;
    justify-content: center;
    align-items: center;
  }

  &__user-photo {
    height: 3.75rem;
    border-radius: 50%;
    margin-right: 1rem;
  }
}

////////////////////////////////////////////
// SIDE NAVIGATION
.side-nav {
  font-size: 1.4rem;
  list-style: none;
  margin-top: 3.5rem;

  &__item {
    position: relative;

    &:not(:last-child) {
      margin-bottom: 0.5rem;
    }
  }

  // The small line that becomes visible and then expands to the right side
  &__item::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    height: 100%; // exactly the same height as the list item
    width: 3px;
    background-color: var(--color-primary);

    transform: scaleY(0);
    // Starts in the middle and grows to the sides, in the Y direction
    // And starts scaling in the center because that's where the transform-origin is set by default.
    // Another example, scaling from the bottom: transform-origin: bottom;
    //
    // We can set different settings for different properties.
    // With width, we specify a delay of .2s. It's exactly the time it takes for this firs transform
    // here to happen.
    //
    // cubic-bezier
    // https://cubic-bezier.com/#1,0,0,1
    // It starts really slow, then it accelerates real fast and then it slows down again.
    transition: transform 0.2s, width 0.4s cubic-bezier(1, 0, 0, 1) 0.2s,
      background-color 0.1s;
  }

  &__item:hover::before,
  &__item--active::before {
    transform: scaleY(1);
    width: 100%; // Expanding all the width
  }

  &__item:active::before {
    background-color: var(--color-primary-light);
  }

  &__link:link,
  &__link:visited {
    color: var(--color-grey-light-1);
    text-decoration: none;
    text-transform: uppercase;
    display: block;
    padding: 1.5rem 3rem;

    // We want the link on top of the before pseudo-element
    // Remember: z-index only works if we have specified a position
    position: relative;
    z-index: 10;

    // To center vertically the svg icon and the text
    display: flex;
    align-items: center;
  }

  &__icon {
    // Usually we size these svg icons as square
    width: 1.75rem;
    height: 1.75rem;

    margin-right: 2rem;
    // currentColor basically is just the color of the current element or the parent element (inherit the color)
    // For example: we could do &__link:hover with orangered color, so the element would be grey-light-1
    // or, if I hover over the element it would be orangered, only with this currentColor. Very useful.
    // It's very well supported by many browsers
    fill: currentColor;
  }
}

////////////////////////////////////////////
// LEGAL TEXT
.legal {
  font-size: 1.2rem;
  color: var(--color-grey-light-4);
  text-align: center;
  padding: 2.5rem;
}

////////////////////////////////////////////
// GALLERY
.gallery {
  // Only with display:flex the photos will be perfectly aligned side by side.
  // Without flexbox, we would have to set the width to 33,33333% and the do a float, using
  // clearfix hack on the parent, and all of that is a bunch of work.
  display: flex;

  &__photo {
    // With responsive design we want flexible images, so we always have to define a width
    // or a height in percentages, so that the image stays fluid.
    width: 100%;

    // That's about having a small space underneath an image, which happens when we leave it
    // as an inline element
    // So an image should always be a block or inline-block if we dont' want that white space.
    display: block;
  }
}

////////////////////////////////////////////
// HOTEL OVERVIEW
.overview {
  display: flex;

  &__heading {
  }

  &__stars {
    // This flex item should grow and occupy all the available space
    // But this isn't really ideal, because this element should only be the size of its content.
    // So, in this case, the size of these stars.
    // If we had a hover effect on this entire element, for example, would change the background color
    //flex: 1;

    // What we really want is a way to create the stars space without stretching out the entire element
    // So we use margin with value auto
    // Now our element only occupy the space that it needs.
    // The rest of the space is the automatically calculated margin.
    // This trick is really helpul in flexbox
    margin-right: auto;
  }

  &__icon-star,
  &__icon-location {
    width: 1.75rem;
    height: 1.75rem;
    fill: var(--color-primary);
  }

  &__location {
  }

  &__rating {
  }

  &__rating-average {
  }

  &__rating-count {
  }
}
